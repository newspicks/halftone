{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/drop-files.directive.ts","webpack:///src/app/image-manipulator.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AppComponent","imgSrv","elementRef","title","brightness","contrast","sampleSize","width","height","files","inputImage","imageChangedEvent","originalCropImage","croppedImage","halftoneImage","croppingPosition","isProcessing","element","nativeElement","event","base64","imagePosition","value","toString","file","ob","next","type","match","reader","FileReader","onload","sendData","filename","name","size","path","target","upload","subscribe","data","push","error","console","log","readAsDataURL","num","splice","halftone","res","cropImageUpdate","err","image","outputFileName","replace","url","window","URL","createObjectURL","toBlob","link","querySelector","href","download","click","bin","atob","buffer","Uint8Array","length","i","charCodeAt","Blob","attacheFiles","imageCropped","imageLoaded","cropperReady","loadImageFailed","sampleSizeUpdated","brightnessUpdated","contrastUpdated","initialize","selector","templateUrl","styleUrls","AppModule","declarations","imports","providers","bootstrap","DropFilesDirective","attachments","selectedFiles","elem","emit","dataTransfer","preventDefault","stopPropagation","ImageManipulatorService","filepath","position","sample","crop","x1","y1","x2","y2","scan","bitmap","x","y","idx","level","radius","iy","ix","idxi","getPixelIndex","Math","round","curR","sqrt","pow","resize","quality","getBase64Async","providedIn","environment","production","bootstrapModule"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component, ElementRef } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ImageCroppedEvent } from 'ngx-image-cropper';\nimport { ImageManipulatorService } from './image-manipulator.service'\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'halftone';\n\n  brightness = 0;\n  contrast = 0;\n  sampleSize = 17;\n  width = 1080;\n  height = 1080;\n  files: any = [];\n\n  inputImage: File = null;\n  imageChangedEvent: any = '';\n  originalCropImage: any = '';\n  croppedImage: any = '';\n  halftoneImage: any = '';\n  croppingPosition: any = {};\n\n  isProcessing = false;\n  private element: HTMLElement;\n\n  /**\n   * @param imgSrv 画像変換のためのサービス ImageManipulatorService\n   * @param elementRef\n   * @memberof AppComponent\n   */\n  constructor(\n    private imgSrv: ImageManipulatorService,\n    private elementRef: ElementRef\n  ) {\n    this.element = this.elementRef.nativeElement;\n  }\n\n  fileChangeEvent(event: any): void {\n      this.imageChangedEvent = event;\n  }\n\n  imageCropped(event: ImageCroppedEvent) {\n    this.croppedImage = event.base64;\n    this.originalCropImage = event.base64;\n    this.croppingPosition = event.imagePosition;\n  }\n\n  imageLoaded() {\n      // show cropper\n  }\n\n  cropperReady() {\n      // cropper ready\n  }\n\n  loadImageFailed() {\n      // show message\n  }\n\n  formatLabel(value: number): string {\n    return value.toString();\n  }\n\n  upload(file: any): Observable<any> {\n    return new Observable( ob => ob.next(file) );\n  }\n\n  /**\n   * 添付ファイルのためのFile API\n   *\n   * https://mi12cp.hatenablog.com/entry/2018/08/10/002344\n   * @desc メールに添付するためのファイルをFile APIで選択するもの\n   * @version 0.0.1\n   */\n  attacheFiles(event: File[]): void {\n    const files = event;  // FileList object\n\n    for (const file of files) {\n      if (!file.type.match('image/.*')) {\n        continue;\n      }\n\n      this.inputImage = files[0];\n      const reader = new FileReader();\n\n      reader.onload = (e) => {\n        const sendData = {\n          filename: file.name,\n          type: file.type,\n          size: file.size,\n          path: e.target['result'],\n        };\n\n        this.upload(sendData).subscribe(\n          data => {\n            this.files.push(data);\n          },\n          error => {\n            console.log(error);\n          }\n        );\n      };\n\n      reader.readAsDataURL(file);\n    }\n  }\n\n  removeFile(num: number): void {\n    this.files.splice(num, 1);\n  }\n\n  /**\n   * ハーフトーン処理を実行する。\n   */\n  sampleSizeUpdated(): void {\n    this.isProcessing = true;\n    this.imgSrv.halftone(\n      this.files[0].path,\n      this.croppingPosition,\n      this.width,\n      this.height,\n      this.sampleSize, this.brightness / 100, this.contrast / 100)\n      .then((res) => {\n        this.halftoneImage = res;\n        this.isProcessing = false;\n      });\n  }\n\n  brightnessUpdated(event: any): void {\n    this.imgSrv.cropImageUpdate(this.originalCropImage, this.brightness / 100, this.contrast / 100)\n      .then((res) => {\n        this.croppedImage = res;\n      }).catch( err => {\n        console.error(err);\n      });\n  }\n\n  contrastUpdated(event: any): void {\n    this.imgSrv.cropImageUpdate(this.originalCropImage, this.brightness / 100, this.contrast / 100)\n      .then((res) => {\n        this.croppedImage = res;\n      }).catch( err => {\n        console.error(err);\n      });\n  }\n\n  /**\n   * 画像のダウンロードを実行する\n   * @param image ダウンロードの対象とするBase64データ\n   */\n  downloadImage(type: string): void {\n    let image: string;\n    let outputFileName: string;\n\n    switch (type) {\n      case 'halftone':\n        image = this.halftoneImage;\n        outputFileName = this.inputImage.name.replace(/\\.(jpg|jpeg|png)/i, '.halftone.jpg');\n        break;\n      case 'cropped':\n        image = this.croppedImage;\n        outputFileName = this.inputImage.name.replace(/\\.(jpg|jpeg|png)/i, '.crop.jpg');\n        break;\n      default:\n        throw new Error('type must be halftone or cropped');\n    }\n\n    const url = window.URL.createObjectURL(this.toBlob(image));\n    const link: HTMLAnchorElement = this.element.querySelector('#img-donwload') as HTMLAnchorElement;\n    link.href = url;\n    link.download = outputFileName;\n    link.click();\n  }\n\n  /**\n   * 初期化\n   * @memberof AppComponent\n   */\n  initialize(): void {\n    this.files = [];\n    this.inputImage = null;\n    this.imageChangedEvent = '';\n    this.originalCropImage = '';\n    this.croppedImage = '';\n    this.halftoneImage = '';\n    this.croppingPosition = {};\n    this.isProcessing = false;\n  }\n\n  /**\n   * base64文字列になっているバイナリデータをBlobバイナリデータに変換する\n   *\n   * @private\n   * @param {string} base64 バイナリデータを base64 エンコードして更に文字列化した文字列\n   * @returns {Blob} 引数の文字列をバイナリに戻したバイナリデータ\n   * @memberof AppComponent\n   * @description\n   *  ZIP ファイルへの変換のみ対応している\n   * @see\n   *  https://developer.mozilla.org/ja/docs/Web/API/WindowBase64/atob\n   *  https://developer.mozilla.org/ja/docs/Web/API/Blob\n   *  https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_objects/Uint8Array\n   */\n  private toBlob(base64: string): Blob {\n    const bin = atob(base64.replace(/^.*,/, ''));\n    const buffer = new Uint8Array(bin.length);\n    for (let i = 0; i < bin.length; i++) {\n      buffer[i] = bin.charCodeAt(i);\n    }\n    return new Blob([buffer.buffer]);\n  }\n}\n","<div class=\"container\">\n  <h1>Halftoned Image Processing</h1>\n  <div>\n    <mat-grid-list cols=\"2\" rowHeight=\"1:1\">\n      <mat-grid-tile>\n        <mat-card>\n          <mat-card-title>\n            <h2>original image</h2>\n          </mat-card-title>\n          <mat-card-content \n          [appDropFiles] \n          (selectedFiles)=\"attacheFiles($event)\"\n          class=\"attache-file-zone mat-elevation-z8\">\n            <p>Drag Image File Here!</p>\n            <image-cropper \n            [imageFile]=\"inputImage\"\n            [imageChangedEvent]=\"imageChangedEvent\"\n            [maintainAspectRatio]=\"true\"\n            [aspectRatio]=\"width / height\"\n            format=\"jpg\"\n            [resizeToWidth]=\"width\"\n            (imageCropped)=\"imageCropped($event)\"\n            (imageLoaded)=\"imageLoaded()\"\n            (cropperReady)=\"cropperReady()\"\n            (loadImageFailed)=\"loadImageFailed()\"\n            ></image-cropper>\n          </mat-card-content>\n        </mat-card>\n      </mat-grid-tile>\n      <mat-grid-tile>\n        <mat-card>\n          <mat-card-title>\n            <h2>cropped image</h2>\n          </mat-card-title>\n          <mat-card-content>\n            <img [src]=\"croppedImage\" class=\"cropped\"/>\n            <div *ngIf=\"croppedImage\">\n              <button mat-raised-button color=\"accent\" (click)=\"downloadImage('cropped')\">DOWNLOAD</button>\n            </div>\n          </mat-card-content>\n        </mat-card>\n      </mat-grid-tile>\n      <mat-grid-tile>\n        <mat-card>\n          <mat-card-content>\n            <h2>Input / Settings</h2>\n            <!--\n              <mat-label>Input Image</mat-label>\n              <input type=\"file\" (change)=\"fileChangeEvent($event)\"/>\n            -->\n            <h3>Target Cropping Size</h3>\n            <mat-form-field class=\"example-full-width\">\n              <mat-label>Width</mat-label>\n              <input matInput type=\"number\" placeholder=\"1080\" [(ngModel)]=\"width\"/>\n            </mat-form-field>\n            <span></span>\n            <mat-form-field class=\"example-full-width\">\n              <mat-label>Height</mat-label>\n              <input matInput type=\"number\" placeholder=\"1080\" [(ngModel)]=\"height\"/>\n            </mat-form-field>\n            <h3>Sample size</h3>\n            <mat-slider \n              thumbLabel\n              [displayWith]=\"formatLabel\"\n              [(ngModel)]=\"sampleSize\"\n              (change)=\"sampleSizeUpdated()\"\n              min=\"7\" max=\"33\" step=\"2\" tickInterval=\"2\"\n              class=\"mat-slider\">\n            </mat-slider>\n            <h3>Brightness</h3>\n            <mat-slider \n              thumbLabel\n              [displayWith]=\"formatLabel\"\n              [(ngModel)]=\"brightness\"\n              (change)=\"brightnessUpdated($event)\"\n              min=\"-100\" max=\"100\" step=\"5\" tickInterval=\"5\"\n              class=\"mat-slider\">\n            </mat-slider>\n            <h3>Contrast</h3>\n            <mat-slider \n              thumbLabel\n              [displayWith]=\"formatLabel\"\n              [(ngModel)]=\"contrast\"\n              (change)=\"contrastUpdated($event)\"\n              min=\"-100\" max=\"100\" step=\"5\" tickInterval=\"5\"\n              class=\"mat-slider\">\n            </mat-slider>\n            <button mat-raised-button color=\"accent\" (click)=\"sampleSizeUpdated()\">CREATE!</button>\n            <button mat-raised-button color=\"warn\" (click)=\"initialize()\">RESET</button>\n          </mat-card-content>\n        </mat-card>\n      </mat-grid-tile>\n      <mat-grid-tile>\n        <mat-card>\n          <mat-card-title>\n            <h2>Halftoned Image</h2>\n          </mat-card-title>\n          <mat-card-content>\n            <div *ngIf=\"isProcessing\" class=\"loading-shade\">\n             <mat-spinner color=\"accent\"></mat-spinner>\n            </div>\n            <img [src]=\"halftoneImage\" class=\"cropped\"/>\n            <div *ngIf=\"halftoneImage\">\n              <button mat-raised-button color=\"accent\" (click)=\"downloadImage('halftone')\">DOWNLOAD</button>\n            </div>\n          </mat-card-content>\n        </mat-card>\n      </mat-grid-tile>\n    </mat-grid-list>\n  </div>\n</div>\n\n<a id=\"img-donwload\" herf=\"\" download></a>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\n\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\n\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatSliderModule } from '@angular/material/slider';\n\nimport { DropFilesDirective } from './drop-files.directive';\nimport { ImageCropperModule } from 'ngx-image-cropper';\n\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n/*\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\n\nimport { MatListModule } from '@angular/material/list';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\n\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\n\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTabsModule } from '@angular/material/tabs';\n\nimport { MatDialogModule } from '@angular/material/dialog';\n*/\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    DropFilesDirective\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    ImageCropperModule,\n    FormsModule,\n    ReactiveFormsModule,\n    DragDropModule,\n\n    MatGridListModule,\n    MatIconModule,\n    MatInputModule,\n    MatListModule,\n    MatCardModule,\n    MatButtonModule,\n    MatSliderModule,\n    MatProgressSpinnerModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  Input,\n  Output,\n} from '@angular/core';\n\n@Directive({\n  selector: '[appDropFiles]'\n})\nexport class DropFilesDirective {\n\n  private attachments: any = [];\n  private elem: HTMLElement;\n\n  @Output()\n  public selectedFiles: EventEmitter<File[]> = new EventEmitter<File[]>();\n\n  constructor(private element: ElementRef) {\n      this.elem = this.element.nativeElement;\n  }\n\n  @Input('appDropFiles')\n  set fileUploadQueue(value: any) {\n      if (value) {\n        this.attachments = value;\n      }\n  }\n\n\n  @HostListener('change')\n  public onChange(): any {\n    const files = this.element.nativeElement.files;\n    this.selectedFiles.emit(files);\n\n    // for (const file of files) {\n    //   this.attachments.push(file);\n    // }\n\n    this.element.nativeElement.value = '';\n  }\n\n  @HostListener('drop', [ '$event' ])\n  public onDrop(event: any): any {\n    const files = event.dataTransfer.files;\n    this.selectedFiles.emit(files);\n\n    // for (const file of files) {\n    //   this.attachments.push(file);\n    // }\n\n    event.preventDefault();\n    event.stopPropagation();\n    this.element.nativeElement.value = '';\n  }\n\n  @HostListener('dragover', [ '$event' ])\n  public onDropOver(event: any): any {\n      event.preventDefault();\n  }\n\n}\n\n","import { Injectable } from '@angular/core';\nimport { CropperPosition } from 'ngx-image-cropper';\nimport { Observable } from 'rxjs';\nimport { read, MIME_JPEG } from 'jimp';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ImageManipulatorService {\n\n  constructor() { }\n\n  async halftone(\n    filepath: any,\n    position: CropperPosition,\n    width: number, height: number, sample: number, brightness: number, contrast: number): Promise<string> {\n    const image = await read(filepath);\n\n    image\n      .crop(position.x1, position.y1, position.x2 - position.x1, position.y2 - position.y1)\n      .brightness(brightness)\n      .contrast(contrast)\n      .scan(0, 0, image.bitmap.width, image.bitmap.height, (x, y, idx) => {\n      // sampleサイズ毎に濃淡を計算し、円のサイズを決める。\n      if (y % sample === 0 && x % sample === 0) {\n        let level = 0;\n        let x1: number;\n        let y1: number;\n        let radius: number;\n\n        for (let iy = 0; iy < sample; iy++) {\n          for (let ix = 0; ix < sample; ix++) {\n            const idxi: number = image.getPixelIndex(x + ix, y + iy);\n            // grey scale値を計算\n            level += Math.round(\n                0.2126 * image.bitmap.data[idxi + 0] +\n                0.7152 * image.bitmap.data[idxi + 1] +\n                0.0722 * image.bitmap.data[idxi + 2]\n            );\n          }\n        }\n        radius =　sample * (1 - level / (sample * sample * 0xFF));\n        x1 = x + (sample - 1) / 2,\n        y1 = y + (sample - 1) / 2;\n\n        for (let iy = 0; iy < sample; iy++) {\n          for (let ix = 0; ix < sample; ix++) {\n            const idxi = image.getPixelIndex(x + ix, y + iy,);\n            // 半径を計算する。\n            const curR = Math.sqrt(Math.pow(x + ix - x1, 2) + Math.pow(y + iy - y1, 2));\n            // grey scale値を計算\n            if (curR < radius) {\n              image.bitmap.data[idxi + 0] = 0x00;\n              image.bitmap.data[idxi + 1] = 0x00;\n              image.bitmap.data[idxi + 2] = 0x00;\n            } else {\n              image.bitmap.data[idxi + 0] = 0xff;\n              image.bitmap.data[idxi + 1] = 0xff;\n              image.bitmap.data[idxi + 2] = 0xff;\n            }\n          }\n        }\n      }\n    });\n\n    // ファイルを保存する\n    return image\n      .resize(width, height)\n      .quality(100)\n      .getBase64Async(MIME_JPEG);\n  }\n\n  async cropImageUpdate(filepath: any, brightness: number, contrast: number): Promise<string> {\n    const image = await read(filepath);\n    return image\n            .brightness(brightness)\n            .contrast(contrast)\n            .getBase64Async(MIME_JPEG);\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}